{"version":3,"file":"static/js/319.6b1aae7c.chunk.js","mappings":"2LAiBAA,QAAQC,IAAIC,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,EAAAA,mBAAAA,8B,uCCJZ,EAVkB,ICaH,WAIb,WAAYC,GAA0B,IAAD,6BAHrCC,cAAQ,EAINC,KAAKD,SAAWE,EAAAA,GAAAA,OAAaH,GAG7BE,KAAKD,SAASG,aAAaC,QAAQC,KACjC,SAACN,GAEC,OAAOA,CACT,IACA,SAACO,GACC,OAAOA,CACT,IAEFL,KAAKD,SAASG,aAAaI,SAASF,KAClC,SAACG,GACC,OAAOA,EAAIC,IACb,IACA,SAACH,GACC,OAAOA,CACT,IAIFL,KAAKD,SAASG,aAAaC,QAAQC,IACd,QADiB,EACpCN,EAAOI,oBAAY,aAAnB,EAAqBO,iBACF,QADkB,EACrCX,EAAOI,oBAAY,aAAnB,EAAqBQ,kBAEvBV,KAAKD,SAASG,aAAaI,SAASF,IACf,QADkB,EACrCN,EAAOI,oBAAY,aAAnB,EAAqBS,kBACF,QADmB,EACtCb,EAAOI,oBAAY,aAAnB,EAAqBU,kBAEzB,CAsCC,OAnCD,+BACA,SAAiBd,GAA6B,IAAD,SAO3C,OALuB,QAAvB,EAAIA,EAAOI,oBAAY,OAAnB,EAAqBO,mBACvBX,EAASA,EAAOI,aAAaO,iBAAiBX,IAIzC,IAAIe,SAAW,SAACC,EAASC,GAC9B,EAAKhB,SACFI,QAAgBL,GAChBkB,MAAK,SAACT,GAAS,IAAD,EAEU,QAAvB,EAAIT,EAAOI,oBAAY,OAAnB,EAAqBS,oBACvBJ,EAAMT,EAAOI,aAAaS,kBAAkBJ,IAE9CO,EAAQP,EACV,IACCU,OAAM,SAACZ,GACNU,EAAOV,EACT,GACJ,GACF,GAAC,iBAED,SAAaP,GACX,OAAOE,KAAKG,SAAQ,kBAAKL,GAAM,IAAEoB,OAAQ,QAC3C,GAAC,kBACD,SAAcpB,GACZ,OAAOE,KAAKG,SAAQ,kBAAKL,GAAM,IAAEoB,OAAQ,SAC3C,GAAC,oBACD,SAAgBpB,GACd,OAAOE,KAAKG,SAAQ,kBAAKL,GAAM,IAAEoB,OAAQ,WAC3C,GAAC,mBACD,SAAepB,GACb,OAAOE,KAAKG,SAAQ,kBAAKL,GAAM,IAAEoB,OAAQ,UAC3C,KAAC,EAzEY,GDbG,CAAc,CAC9BC,QDHsB,2BCItBC,QDFsB,ICGtBlB,aAAc,CACZO,iBAAkB,SAACX,GACjB,OAAOA,CACT,K,SEWEuB,EAAwB,WAC5B,OAA8BC,EAAAA,EAAAA,UAAwB,IAAG,eAAlDC,EAAO,KAAEC,EAAU,KAa1B,OAVAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,IACO,CACHC,IAAK,YAENX,MAAK,SAACT,GACLiB,EAAWjB,EAAIgB,QACjB,GACJ,GAAG,KAGD,yBACGA,EAAQK,KAAI,SAACC,EAAMC,GAClB,OAAO,yBAAkBD,EAAKE,UAAbD,EACnB,KAGN,EAEA,GAAeE,EAAAA,EAAAA,MAAKX,E","sources":["service/config/index.ts","service/index.ts","service/request/index.ts","views/discover/c-views/recommend/index.tsx"],"sourcesContent":["// 1.手动切换\nexport const BASE_URL = 'http://codercba.com:9002'\n// export const BASE_URL = 'http://codercba.prod:9002'\nexport const TIME_OUT = 10000\n\n// 2.依赖当前环境: development/production\n// console.log(process.env.NODE_ENV)\n// let BASE_URL = ''\n// if (process.env.NODE_ENV === 'development') {\n//   BASE_URL = 'http://codercba.dev:9002'\n// } else {\n//   BASE_URL = 'http://codercba.prod:9002'\n// }\n\n// export { BASE_URL }\n\n// 3.从定义的环境变量的配置文件中, 加载变量\nconsole.log(process.env)\n","import { BASE_URL, TIME_OUT } from './config'\nimport HYRequest from './request'\n\nconst hyRequest = new HYRequest({\n  baseURL: BASE_URL,\n  timeout: TIME_OUT,\n  interceptors: {\n    requestSuccessFn: (config) => {\n      return config\n    }\n  }\n})\n\nexport default hyRequest\n","import axios from 'axios'\nimport type { AxiosInstance } from 'axios'\nimport type { HYRequestConfig } from './type'\n\n// 拦截器: 蒙版Loading/token/修改配置\n\n/**\n * 两个难点:\n *  1.拦截器进行精细控制\n *    > 全局拦截器\n *    > 实例拦截器\n *    > 单次请求拦截器\n *\n *  2.响应结果的类型处理(泛型)\n */\n\nclass HYRequest {\n  instance: AxiosInstance\n\n  // request实例 => axios的实例\n  constructor(config: HYRequestConfig) {\n    this.instance = axios.create(config)\n\n    // 每个instance实例都添加拦截器\n    this.instance.interceptors.request.use(\n      (config) => {\n        // loading/token\n        return config\n      },\n      (err) => {\n        return err\n      }\n    )\n    this.instance.interceptors.response.use(\n      (res) => {\n        return res.data\n      },\n      (err) => {\n        return err\n      }\n    )\n\n    // 针对特定的hyRequest实例添加拦截器\n    this.instance.interceptors.request.use(\n      config.interceptors?.requestSuccessFn,\n      config.interceptors?.requestFailureFn\n    )\n    this.instance.interceptors.response.use(\n      config.interceptors?.responseSuccessFn,\n      config.interceptors?.responseFailureFn\n    )\n  }\n\n  // 封装网络请求的方法\n  // T => IHomeData\n  request<T = any>(config: HYRequestConfig<T>) {\n    // 单次请求的成功拦截处理\n    if (config.interceptors?.requestSuccessFn) {\n      config = config.interceptors.requestSuccessFn(config)\n    }\n\n    // 返回Promise\n    return new Promise<T>((resolve, reject) => {\n      this.instance\n        .request<any, T>(config)\n        .then((res) => {\n          // 单词响应的成功拦截处理\n          if (config.interceptors?.responseSuccessFn) {\n            res = config.interceptors.responseSuccessFn(res)\n          }\n          resolve(res)\n        })\n        .catch((err) => {\n          reject(err)\n        })\n    })\n  }\n\n  get<T = any>(config: HYRequestConfig<T>) {\n    return this.request({ ...config, method: 'GET' })\n  }\n  post<T = any>(config: HYRequestConfig<T>) {\n    return this.request({ ...config, method: 'POST' })\n  }\n  delete<T = any>(config: HYRequestConfig<T>) {\n    return this.request({ ...config, method: 'DELETE' })\n  }\n  patch<T = any>(config: HYRequestConfig<T>) {\n    return this.request({ ...config, method: 'PATCH' })\n  }\n}\n\nexport default HYRequest\n","import React, { memo, useEffect, useState } from 'react'\nimport type { FC, ReactNode } from 'react'\nimport hyRequest from '@/service'\n\ninterface IProps {\n  children?: ReactNode\n}\n\nexport interface IBannerData {\n  imageUrl: string\n  targetId: number\n  targetType: number\n  titleColor: string\n  typeTitle: string\n  url: string\n  exclusive: boolean\n  scm: string\n  bannerBizType: string\n}\n\nconst Recommend: FC<IProps> = () => {\n  const [banners, setBanners] = useState<IBannerData[]>([])\n\n  // 测试网络请求\n  useEffect(() => {\n    hyRequest\n      .get({\n        url: '/banner'\n      })\n      .then((res) => {\n        setBanners(res.banners)\n      })\n  }, [])\n\n  return (\n    <div>\n      {banners.map((item, index) => {\n        return <div key={index}>{item.imageUrl}</div>\n      })}\n    </div>\n  )\n}\n\nexport default memo(Recommend)\n"],"names":["console","log","process","config","instance","this","axios","interceptors","request","use","err","response","res","data","requestSuccessFn","requestFailureFn","responseSuccessFn","responseFailureFn","Promise","resolve","reject","then","catch","method","baseURL","timeout","Recommend","useState","banners","setBanners","useEffect","hyRequest","url","map","item","index","imageUrl","memo"],"sourceRoot":""}